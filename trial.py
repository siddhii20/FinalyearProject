# -*- coding: utf-8 -*-
"""Trial.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/146voYqYmCRdbg9ZicRV0-e0tZ5sPprYe
"""

import os
import pandas as pd
#from tensorflow.keras.utils import get_file
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import time
import pickle

#!pip install patool
#patoolib.extract_archive('/content/kddcup.testdata.unlabeled_10_percent.gz.zip')

#patoolib.extract_archive('/content/corrected.gz')

#from google.colab import drive
#drive.mount('/content/drive')
import patoolib
patoolib.extract_archive('corrected.gz')
#loading the dataset
kdd99_df = pd.read_csv('kddcup99.csv')
temp_kdd99_df=kdd99_df

#loading test data
#test_df=pd.read_csv('/content/kddcup.testdata.unlabeled_10_percent.gz')
corrected=pd.read_csv('corrected')

len(list(corrected))

test_df=corrected.drop(['normal.',], axis=1)

y_true=corrected['normal.']

y_true

y_true.unique()

y_true=y_true.replace(to_replace=['buffer_overflow.','perl.','loadmodule.','rootkit.','xterm.','ps.','sqlattack.'], value='U2R')
y_true=y_true.replace(to_replace=['back.','neptune.','smurf.','pod.','teardrop.','land.','snmpgetattack.','apache2.','worm.','processtable.','udpstorm.', 'mailbomb.'], value='DoS')
y_true=y_true.replace(to_replace=['ftp_write.','guess_passwd.','imap.','multihop.','phf.','warezmaster.','xlock.','xsnoop.','sendmail.','snmpguess.','named.','httptunnel.',], value='R2L')
y_true=y_true.replace(to_replace=['ipsweep.','nmap.','portsweep.','satan.','saint.','mscan.',], value='Probe')
y_true=y_true.replace(to_replace='normal.', value='Normal')

y_true.unique()

#len(kdd99_df)
kdd99_df.label.unique()

#len(test_df)

#Number of features in the kdd99 dataset
len(list(kdd99_df))

kdd99_df=kdd99_df.replace(to_replace=['buffer_overflow','perl','loadmodule','rootkit'], value='U2R')
kdd99_df=kdd99_df.replace(to_replace=['back','neptune','smurf','pod','teardrop','land'], value='DoS')
kdd99_df=kdd99_df.replace(to_replace=['ftp_write','guess_passwd','imap','multihop','phf','warezmaster', 'warezclient', 'spy'], value='R2L')
kdd99_df=kdd99_df.replace(to_replace=['ipsweep','nmap','portsweep','satan'], value='Probe')
kdd99_df=kdd99_df.replace(to_replace='normal', value='Normal')

kdd99_df.label.unique()

#Number of features before dropping highly correlated features
len(list(temp_kdd99_df))

#protocol_type feature mapping
pmap = {'icmp':0,'tcp':1,'udp':2}
kdd99_df['protocol_type'] =kdd99_df['protocol_type'].map(pmap)

#flag feature mapping
fmap = {'SF':0,'S0':1,'REJ':2,'RSTR':3,'RSTO':4,'SH':5 ,'S1':6 ,'S2':7,'RSTOS0':8,'S3':9 ,'OTH':10}
kdd99_df['flag'] =kdd99_df['flag'].map(fmap)

kdd99_df.drop('service',axis = 1,inplace= True)

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import accuracy_score

#temp_kdd99_df = temp_kdd99_df.drop(['label',], axis=1)
print(kdd99_df.shape)

# Target variable and train set
Y = kdd99_df[['label']]
X = kdd99_df.drop(['label',], axis=1)

sc = MinMaxScaler()
X = sc.fit_transform(X)

# Split test and train data 
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.33, random_state=42)
print(X_train.shape)
print(Y_train.shape)

#test_df = test_df.drop(['label',], axis=1)
#print(test_df.shape)

# Target variable and train set
#Y = test_df[['label']]
#X = test_df.drop(['label',], axis=1)

sc = MinMaxScaler()
X = sc.fit_transform(X)

# Split test and train data 
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.33, random_state=42)
print( X_test.shape)
print(Y_test.shape)

print(Y_train.values.ravel())

#from sklearn.naive_bayes import GaussianNB

#model1 = GaussianNB()
#start_time = time.time()
#model1.fit(temp_kdd99_df, Y_train.values.ravel())
#end_time = time.time()

#print("Training time: ",end_time-start_time)
#start_time = time.time()
#Y_test_pred1 = model1.predict(X_test)
#end_time = time.time()

#print("Testing time: ",end_time-start_time)

#print("Train score is:", model1.score(X_train, Y_train))
#print("Test score is:",model1.score(X_test,Y_test))

kdd99_df =kdd99_df.dropna('columns')

from sklearn.naive_bayes import GaussianNB
model1 = GaussianNB()
start_time = time.time()
model1.fit(X_train, Y_train.values.ravel())
end_time = time.time()

print("Training time: ",end_time-start_time)

start_time = time.time()
Y_test_pred1 = model1.predict(X_test)
end_time = time.time()

print("Testing time: ",end_time-start_time)

print("Train score is:", model1.score(X_train, Y_train))
print("Test score is:",model1.score(X_test,Y_test))

Y_test_pred1

from sklearn.metrics import accuracy_score
accuracy_score(Y_test,Y_test_pred1)

#protocol_type feature mapping
pmap = {'icmp':0,'tcp':1,'udp':2}
test_df['udp']= test_df['udp'].map(pmap)

#flag feature mapping
fmap = {'SF':0,'S0':1,'REJ':2,'RSTR':3,'RSTO':4,'SH':5 ,'S1':6 ,'S2':7,'RSTOS0':8,'S3':9 ,'OTH':10}
test_df['SF'] = test_df['SF'].map(fmap)

test_df.drop('private',axis = 1,inplace= True)

test_df

#Testing:

start_time = time.time()
y_pred = model1.predict(test_df)
end_time = time.time()

y_true

from sklearn.metrics import accuracy_score
accuracy_score(y_true, y_pred)

"""# **Decision** **Tree**"""

from sklearn.tree import DecisionTreeClassifier
model2 = DecisionTreeClassifier()
start_time = time.time()
model2.fit(X_train, Y_train.values.ravel())
end_time = time.time()

print("Training time: ",end_time-start_time)

start_time = time.time()
Y_test_pred2 = model2.predict(X_test)
end_time = time.time()

print("Testing time: ",end_time-start_time)

print("Train score is:", model2.score(X_train, Y_train))
print("Test score is:",model2.score(X_test,Y_test))

from sklearn.metrics import accuracy_score
accuracy_score(Y_test,Y_test_pred2)

start_time = time.time()
y_pred2 = model2.predict(test_df)
end_time = time.time()

accuracy_score(y_true, y_pred2)
pickle.dump(model2, open("model1.pkl", "wb"))

